from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton


def get_main_menu() -> InlineKeyboardBuilder:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="check_queue"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings"),
        InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="toggle_notifications"),
        InlineKeyboardButton(text="üöó –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ", callback_data="change_car"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ", callback_data="delete_car"),
        InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
    ]
    
    builder.add(*buttons)
    builder.adjust(2)
    return builder.as_markup()


def get_notification_settings_keyboard(settings: dict) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    builder = InlineKeyboardBuilder()
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    interval_text = f"{'‚úÖ' if settings.get('interval_mode', False) else '‚ùå'} –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ({settings.get('interval_minutes', 2)} –º–∏–Ω.)"
    builder.add(InlineKeyboardButton(text=interval_text, callback_data="toggle_interval"))
    
    # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    position_text = f"{'‚úÖ' if settings.get('position_change', False) else '‚ùå'} –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"
    builder.add(InlineKeyboardButton(text=position_text, callback_data="toggle_position"))
    
    # –ü—Ä–∏ —Å–¥–≤–∏–≥–µ –æ—á–µ—Ä–µ–¥–∏
    threshold_text = f"{'‚úÖ' if settings.get('threshold_change', False) else '‚ùå'} –ü—Ä–∏ —Å–¥–≤–∏–≥–µ –æ—á–µ—Ä–µ–¥–∏ ({settings.get('threshold_value', 10)} –ø–æ–∑–∏—Ü–∏–π)"
    builder.add(InlineKeyboardButton(text=threshold_text, callback_data="toggle_threshold"))
    
    # –û–±—â–µ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    enabled_text = f"{'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' if settings.get('enabled', True) else 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã'}"
    builder.add(InlineKeyboardButton(text=enabled_text, callback_data="toggle_notifications"))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    builder.adjust(1)
    return builder.as_markup()


def get_notification_interval_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    builder = InlineKeyboardBuilder()
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    intervals = [2, 5, 10, 15, 30, 60]
    buttons = [InlineKeyboardButton(text=f"{interval} –º–∏–Ω.", callback_data=f"interval_{interval}") for interval in intervals]
    
    builder.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="interval_back"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(3, 3, 1)
    return builder.as_markup()


def get_notification_threshold_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞ —Å–¥–≤–∏–≥–∞ –æ—á–µ—Ä–µ–¥–∏."""
    builder = InlineKeyboardBuilder()
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Ä–æ–≥–æ–≤
    thresholds = [5, 10, 15, 20, 30, 50]
    buttons = [InlineKeyboardButton(text=f"{threshold} –ø–æ–∑–∏—Ü–∏–π", callback_data=f"threshold_{threshold}") for threshold in thresholds]
    
    builder.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="threshold_back"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(3, 3, 1)
    return builder.as_markup() 