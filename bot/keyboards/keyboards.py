from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton


def get_main_menu() -> InlineKeyboardBuilder:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="check_queue"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings"),
        InlineKeyboardButton(text="üí¨ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç", callback_data="open_chat"),
        InlineKeyboardButton(text="üöó –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ", callback_data="change_car"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ", callback_data="delete_car"),
        InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
    ]
    
    builder.add(*buttons)
    builder.adjust(2)
    return builder.as_markup()


def get_notification_settings_keyboard(settings: dict) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    builder = InlineKeyboardBuilder()
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    interval_text = f"{'‚úÖ' if settings.get('interval_mode', False) else '‚ùå'} –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º ({settings.get('interval_minutes', 2)} –º–∏–Ω.)"
    builder.add(InlineKeyboardButton(text=interval_text, callback_data="toggle_interval"))
    
    # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    position_text = f"{'‚úÖ' if settings.get('position_change', False) else '‚ùå'} –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"
    builder.add(InlineKeyboardButton(text=position_text, callback_data="toggle_position"))
    
    # –ü—Ä–∏ —Å–¥–≤–∏–≥–µ –æ—á–µ—Ä–µ–¥–∏
    threshold_text = f"{'‚úÖ' if settings.get('threshold_change', False) else '‚ùå'} –ü—Ä–∏ —Å–¥–≤–∏–≥–µ –æ—á–µ—Ä–µ–¥–∏ ({settings.get('threshold_value', 10)} –ø–æ–∑–∏—Ü–∏–π)"
    builder.add(InlineKeyboardButton(text=threshold_text, callback_data="toggle_threshold"))
    
    # –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –æ—á–µ—Ä–µ–¥–∏
    queue_threshold_text = f"{'‚úÖ' if settings.get('queue_threshold', False) else '‚ùå'} –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ ({settings.get('queue_threshold_value', 10)})"
    builder.add(InlineKeyboardButton(text=queue_threshold_text, callback_data="toggle_queue_threshold"))
    
    # –û–±—â–µ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    enabled_text = f"{'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' if settings.get('enabled', True) else 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã'}"
    builder.add(InlineKeyboardButton(text=enabled_text, callback_data="toggle_notifications"))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    builder.adjust(1)
    return builder.as_markup()


def get_notification_interval_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    builder = InlineKeyboardBuilder()
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    intervals = [2, 5, 10, 15, 30, 60]
    buttons = [InlineKeyboardButton(text=f"{interval} –º–∏–Ω.", callback_data=f"interval_{interval}") for interval in intervals]
    
    builder.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="interval_back"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(3, 3, 1)
    return builder.as_markup()


def get_notification_threshold_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–∞ —Å–¥–≤–∏–≥–∞ –æ—á–µ—Ä–µ–¥–∏."""
    builder = InlineKeyboardBuilder()
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Ä–æ–≥–æ–≤
    thresholds = [5, 10, 15, 20, 30, 50]
    buttons = [InlineKeyboardButton(text=f"{threshold} –ø–æ–∑–∏—Ü–∏–π", callback_data=f"threshold_{threshold}") for threshold in thresholds]
    
    builder.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="threshold_back"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(3, 3, 1)
    return builder.as_markup()


def get_queue_threshold_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏."""
    builder = InlineKeyboardBuilder()
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Ä–æ–≥–æ–≤ –Ω–æ–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
    thresholds = [3, 5, 10, 15, 20, 30]
    buttons = [InlineKeyboardButton(text=f"–ù–æ–º–µ—Ä {threshold}", callback_data=f"queue_threshold_{threshold}") for threshold in thresholds]
    
    builder.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="queue_threshold_back"))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    builder.adjust(3, 3, 1)
    return builder.as_markup()


def get_chat_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞."""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_message"),
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç", callback_data="refresh_chat"),
        InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report_message"),
        InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data="exit_chat"),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main"),
    ]
    
    builder.add(*buttons)
    builder.adjust(2, 2, 1)
    return builder.as_markup()


def get_chat_message_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."""
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üëç –°–ø–∞—Å–∏–±–æ", callback_data="like_message"),
        InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report_message"),
    ]
    
    builder.add(*buttons)
    builder.adjust(2)
    return builder.as_markup()


def get_chat_report_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∂–∞–ª–æ–±—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    builder = InlineKeyboardBuilder()
    
    reasons = [
        "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ",
        "–°–ø–∞–º",
        "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞",
        "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    ]
    
    buttons = [
        InlineKeyboardButton(text=reason, callback_data=f"report_reason_{i}")
        for i, reason in enumerate(reasons)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_report"))
    
    builder.add(*buttons)
    builder.adjust(1)
    return builder.as_markup()


def get_back_to_chat_keyboard() -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —á–∞—Ç."""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç", callback_data="back_to_chat"))
    
    return builder.as_markup() 