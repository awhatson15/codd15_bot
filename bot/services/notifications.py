import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.config.config import load_config
from bot.models.database import (
    get_car_data, get_users_for_notification, 
    update_last_notification, get_notification_settings,
    update_queue_data
)
from bot.services.parser import CoddParser


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.config = load_config()
        self.logger = logging.getLogger("notifications")
        self.scheduler = AsyncIOScheduler()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        self.scheduler.add_job(
            self.check_notifications,
            'interval',
            seconds=30,
            id='check_notifications'
        )
        
        self.scheduler.start()
    
    async def check_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            users = await get_users_for_notification()
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            for user_id, car_number, settings in users:
                try:
                    await self.process_user_notification(user_id, car_number, settings)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def process_user_notification(self, user_id: int, car_number: str, settings: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        car_data = await get_car_data(car_number)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —Å —Å–∞–π—Ç–∞
        if not car_data:
            self.logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ {car_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é.")
            parser = CoddParser()
            parsed_car_data = await parser.parse_car_data(car_number)
            
            if parsed_car_data:
                self.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_number}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                await update_queue_data({car_number: {
                    'model': parsed_car_data['model'],
                    'queue_position': parsed_car_data['queue_position'],
                    'registration_date': parsed_car_data['registration_date']
                }})
                car_data = parsed_car_data
            else:
                self.logger.warning(f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –±–∞–∑–µ, –Ω–∏ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        last_notification = settings.get('last_notification')
        if last_notification:
            try:
                last_notification = datetime.fromisoformat(last_notification.replace(' ', 'T'))
            except:
                last_notification = datetime.now() - timedelta(days=1)
        else:
            last_notification = datetime.now() - timedelta(days=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        send_notification = False
        notification_text = ""
        
        # 1. –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if settings.get('interval_mode'):
            interval_minutes = settings.get('interval_minutes', self.config.default_notification_interval)
            next_notification_time = last_notification + timedelta(minutes=interval_minutes)
            
            if datetime.now() > next_notification_time:
                send_notification = True
                notification_text = (
                    f"üöó *–ü–ª–∞–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—á–µ—Ä–µ–¥–∏*\n\n"
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: `{car_data['car_number']}`\n"
                    f"–ú–æ–¥–µ–ª—å: {car_data['model']}\n"
                    f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: *{car_data['queue_position']}*\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}"
                )
        
        # 2. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        if settings.get('position_change'):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            last_position = await self._get_last_known_position(user_id, car_number)
            
            if last_position and last_position != car_data['queue_position']:
                send_notification = True
                position_change = last_position - car_data['queue_position']
                change_text = (
                    f"‚¨ÜÔ∏è –ø–æ–≤—ã—Å–∏–ª–∞—Å—å –Ω–∞ {abs(position_change)}" if position_change > 0 
                    else f"‚¨áÔ∏è –ø–æ–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ {abs(position_change)}"
                )
                
                notification_text = (
                    f"üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!*\n\n"
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: `{car_data['car_number']}`\n"
                    f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è {change_text}\n"
                    f"–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: *{car_data['queue_position']}*\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–æ–º–µ—Ä: {last_position}"
                )
        
        # 3. –ü—Ä–∏ —Å–¥–≤–∏–≥–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ N –ø–æ–∑–∏—Ü–∏–π
        if settings.get('threshold_change'):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏
            last_first_position = await self._get_first_position()
            current_first_position = await self._get_current_first_position()
            
            if last_first_position and current_first_position:
                threshold = settings.get('threshold_value', 10)
                position_change = last_first_position - current_first_position
                
                if position_change >= threshold:
                    send_notification = True
                    notification_text = (
                        f"üìä *–û—á–µ—Ä–µ–¥—å —Å–¥–≤–∏–Ω—É–ª–∞—Å—å –Ω–∞ {position_change} –ø–æ–∑–∏—Ü–∏–π!*\n\n"
                        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: `{car_data['car_number']}`\n"
                        f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: *{car_data['queue_position']}*\n"
                        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}"
                    )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–∞
        if send_notification:
            try:
                await self.bot.send_message(
                    user_id,
                    notification_text,
                    parse_mode="Markdown"
                )
                await update_last_notification(user_id)
                self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def _get_last_known_position(self, user_id: int, car_number: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        # –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç
        # –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        return None
    
    async def _get_first_position(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        return None
    
    async def _get_current_first_position(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏."""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –Ω–æ–º–µ—Ä–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
        return None


async def start_notification_service(bot: Bot):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    notification_service = NotificationService(bot)
    await notification_service.start() 