import asyncio
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from aiogram import Bot

from database.db import (
    get_cars_for_notification, get_last_queue_data,
    get_previous_queue_data, update_last_notification
)
from services.utils import format_car_info

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.scheduler.add_job(
            self.check_notifications,
            IntervalTrigger(minutes=1),
            id='check_notifications'
        )
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
    async def check_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            cars = await get_cars_for_notification()
            
            for user_id, car_id, car_number, interval_mode, position_change, shift_threshold, last_notification in cars:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
                current_data = await get_last_queue_data(car_number)
                
                if not current_data:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                    
                current_position, model, reg_date, timestamp = current_data
                
                # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º datetime.min
                last_notif_time = last_notification if last_notification else datetime.min
                
                # –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                should_notify = False
                notification_reason = ""
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
                if interval_mode > 0:
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç, —á–µ–º —É–∫–∞–∑–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if datetime.now() - last_notif_time > timedelta(minutes=interval_mode):
                        should_notify = True
                        notification_reason = f"–ü–ª–∞–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ {interval_mode} –º–∏–Ω.)"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                if position_change and not should_notify:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
                    prev_data = await get_previous_queue_data(car_number)
                    
                    if prev_data and prev_data[0] != current_position:
                        should_notify = True
                        change = prev_data[0] - current_position
                        direction = "üîΩ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å" if change > 0 else "üîº —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å"
                        notification_reason = f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ {direction} –Ω–∞ {abs(change)}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥ —Å–¥–≤–∏–≥–∞ –æ—á–µ—Ä–µ–¥–∏
                if shift_threshold > 0 and not should_notify:
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—á–µ—Ä–µ–¥–∏
                    prev_data = await get_previous_queue_data(car_number)
                    
                    if prev_data:
                        change = prev_data[0] - current_position
                        if abs(change) >= shift_threshold:
                            should_notify = True
                            direction = "üîΩ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å" if change > 0 else "üîº —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å"
                            notification_reason = f"–û—á–µ—Ä–µ–¥—å {direction} –Ω–∞ {abs(change)} –ø–æ–∑–∏—Ü–∏–π"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if should_notify:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    info_message = f"<b>{notification_reason}</b>\n\n"
                    info_message += format_car_info(car_number, model, current_position, reg_date)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    try:
                        await self.bot.send_message(
                            user_id,
                            info_message,
                            parse_mode="HTML"
                        )
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        await update_last_notification(user_id, car_id)
                        
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∞–≤—Ç–æ {car_number}")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            