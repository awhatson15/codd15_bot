import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.config.config import load_config
from bot.models.database import (
    get_users_for_notification, 
    update_last_notification, get_notification_settings, get_active_chat_users
)
from bot.services.parser import CoddParser


class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.config = load_config()
        self.logger = logging.getLogger("notifications")
        self.scheduler = AsyncIOScheduler()
        self.parser = CoddParser()
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –≤–º–µ—Å—Ç–æ –ë–î
        self.car_positions = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        self.first_car_position = None  # –ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        check_interval = self.config.notification_check_interval
        self.logger.info(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {check_interval} —Å–µ–∫—É–Ω–¥")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        self.scheduler.add_job(
            self.check_notifications,
            'interval',
            seconds=check_interval,
            id='check_notifications'
        )
        
        self.scheduler.start()
    
    async def close(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        self.scheduler.shutdown(wait=False)
        self.logger.info("–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if hasattr(self.parser, 'close'):
            await self.parser.close()
    
    async def check_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            users = await get_users_for_notification()
            self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏
            await self._update_first_car_position()
            
            for user_id, car_number, settings in users:
                try:
                    await self.process_user_notification(user_id, car_number, settings)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def process_user_notification(self, user_id: int, car_number: str, settings: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
        car_data = await self.parser.parse_car_data(car_number)
        if not car_data:
            self.logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ {car_number} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        current_position = car_data['queue_position']
        if car_number not in self.car_positions:
            self.car_positions[car_number] = current_position
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        last_notification = settings.get('last_notification')
        if last_notification:
            try:
                last_notification = datetime.fromisoformat(last_notification.replace(' ', 'T'))
            except:
                last_notification = datetime.now() - timedelta(days=1)
        else:
            last_notification = datetime.now() - timedelta(days=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        send_notification = False
        notification_text = ""
        
        # 1. –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if settings.get('interval_mode'):
            interval_minutes = settings.get('interval_minutes', self.config.default_notification_interval)
            next_notification_time = last_notification + timedelta(minutes=interval_minutes)
            
            if datetime.now() > next_notification_time:
                send_notification = True
                notification_text = (
                    f"üöó *–ü–ª–∞–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—á–µ—Ä–µ–¥–∏*\n\n"
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: `{car_data['car_number']}`\n"
                    f"–ú–æ–¥–µ–ª—å: {car_data['model']}\n"
                    f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: *{car_data['queue_position']}*\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}"
                )
        
        # 2. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
        if settings.get('position_change'):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            last_position = self.car_positions.get(car_number)
            
            if last_position and last_position != current_position:
                send_notification = True
                position_change = last_position - current_position
                change_text = (
                    f"‚¨ÜÔ∏è –ø–æ–≤—ã—Å–∏–ª–∞—Å—å –Ω–∞ {abs(position_change)}" if position_change > 0 
                    else f"‚¨áÔ∏è –ø–æ–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ {abs(position_change)}"
                )
                
                notification_text = (
                    f"üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏!*\n\n"
                    f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: `{car_data['car_number']}`\n"
                    f"–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è {change_text}\n"
                    f"–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: *{car_data['queue_position']}*\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–æ–º–µ—Ä: {last_position}"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                self.car_positions[car_number] = current_position
        
        # 3. –ü—Ä–∏ —Å–¥–≤–∏–≥–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ N –ø–æ–∑–∏—Ü–∏–π
        if settings.get('threshold_change') and self.first_car_position is not None:
            last_first_position = self._get_last_first_position()
            current_first_position = self.first_car_position
            
            if last_first_position and current_first_position:
                threshold = settings.get('threshold_value', 10)
                position_change = last_first_position - current_first_position
                
                if position_change >= threshold:
                    send_notification = True
                    notification_text = (
                        f"üìä *–û—á–µ—Ä–µ–¥—å —Å–¥–≤–∏–Ω—É–ª–∞—Å—å –Ω–∞ {position_change} –ø–æ–∑–∏—Ü–∏–π!*\n\n"
                        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: `{car_data['car_number']}`\n"
                        f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: *{car_data['queue_position']}*\n"
                        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}"
                    )
        
        # 4. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
        if settings.get('queue_threshold'):
            queue_threshold_value = settings.get('queue_threshold_value', 10)
            current_position = car_data['queue_position']
            
            if current_position <= queue_threshold_value:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞
                key = f"{car_number}_queue_threshold_{queue_threshold_value}"
                if not hasattr(self, 'sent_threshold_notifications'):
                    self.sent_threshold_notifications = {}
                
                if not self.sent_threshold_notifications.get(key, False):
                    send_notification = True
                    notification_text = (
                        f"üèÅ *–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø–æ—Ä–æ–≥ –æ—á–µ—Ä–µ–¥–∏!*\n\n"
                        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: `{car_data['car_number']}`\n"
                        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: *{current_position}*\n"
                        f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥: {queue_threshold_value}\n"
                        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}"
                    )
                    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    self.sent_threshold_notifications[key] = True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–∞
        if send_notification:
            try:
                await self.bot.send_message(
                    user_id,
                    notification_text,
                    parse_mode="Markdown"
                )
                await update_last_notification(user_id)
                self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def _update_first_car_position(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–π –º–∞—à–∏–Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏
            # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –º–∞—à–∏–Ω—ã
            # —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
            first_car_data = await self.parser.get_first_car_position()
            
            if first_car_data is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                old_position = self.first_car_position
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                self.first_car_position = first_car_data
                
                self.logger.info(f"–ü–æ–∑–∏—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.first_car_position}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
    
    def _get_last_first_position(self) -> Optional[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
        return getattr(self, '_last_first_position', self.first_car_position)


async def start_notification_service(bot: Bot):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    notification_service = NotificationService(bot)
    await notification_service.start()
    return notification_service


async def process_chat_notifications(bot: Bot, message_data: dict, sender_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–∞—Ç–∞ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
        users = await get_active_chat_users()
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if sender_id in users:
            users.remove(sender_id)
        
        if not users:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        position_text = f" (#{message_data['queue_position']})" if message_data.get('queue_position') else ""
        notification_text = (
            f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ</b>\n\n"
            f"<b>{message_data['anonymous_id']}</b>{position_text}:\n"
            f"{message_data['message_text']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for user_id in users:
            try:
                await bot.send_message(
                    user_id,
                    notification_text
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–∞—Ç–∞: {e}") 