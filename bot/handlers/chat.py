from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from bot.models.database import (
    generate_anonymous_id,
    save_chat_message,
    get_recent_messages,
    report_message,
    toggle_chat_participation,
    is_user_banned,
    get_active_chat_users,
    get_car_number
)
from bot.keyboards.keyboards import (
    get_chat_keyboard,
    get_chat_message_keyboard,
    get_chat_report_keyboard,
    get_back_to_chat_keyboard
)
from bot.utils.message_utils import safe_edit_message
from bot.services.parser import CoddParser
from bot.services.notifications import process_chat_notifications


class ChatState(StatesGroup):
    in_chat = State()
    waiting_for_message = State()
    report_reason = State()


async def cmd_chat(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chat –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ state —Ä–∞–≤–µ–Ω None
    if state is None:
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /chat –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è
        await message.answer(
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /chat –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        )
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    car_number = await get_car_number(message.from_user.id)
    
    if not car_number:
        await message.answer(
            "‚ùå –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    parser = CoddParser()
    car_data = await parser.parse_car_data(car_number)
    
    if not car_data:
        await message.answer(
            f"‚ùå –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å {car_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
            "–í —á–∞—Ç–µ –º–æ–≥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await is_user_banned(message.from_user.id):
        await message.answer(
            "‚õî –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID
    anonymous_id = await generate_anonymous_id(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = await get_recent_messages(20)
    
    # –í–∫–ª—é—á–∞–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —á–∞—Ç–µ
    await toggle_chat_participation(message.from_user.id, True)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = await get_active_chat_users()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
    chat_header = (
        f"üí¨ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n"
        f"–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º: <b>{anonymous_id}</b>\n"
        f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{car_data['queue_position']}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(active_users)}</b>\n\n"
        f"<i>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏</i>\n"
        f"<i>–£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞!</i>\n\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
    )
    
    messages_text = ""
    if not messages:
        messages_text = "–í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
    else:
        for msg in messages:
            position_text = f" (#{msg['queue_position']})" if msg['queue_position'] else ""
            messages_text += f"<b>{msg['anonymous_id']}</b>{position_text}:\n{msg['message_text']}\n\n"
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        f"{chat_header}{messages_text}",
        reply_markup=get_chat_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–≤ —á–∞—Ç–µ"
    await state.set_state(ChatState.in_chat)


async def refresh_chat_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞—Ç–∞."""
    await callback.answer("–û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = await get_recent_messages(20)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    active_users = await get_active_chat_users()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    anonymous_id = await generate_anonymous_id(callback.from_user.id)
    car_number = await get_car_number(callback.from_user.id)
    
    # –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
    queue_position = "?"
    if car_number:
        parser = CoddParser()
        car_data = await parser.parse_car_data(car_number)
        if car_data:
            queue_position = car_data['queue_position']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞
    chat_header = (
        f"üí¨ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n"
        f"–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º: <b>{anonymous_id}</b>\n"
        f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{queue_position}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <b>{len(active_users)}</b>\n\n"
        f"<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: —Ç–æ–ª—å–∫–æ —á—Ç–æ</i>\n\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n"
    )
    
    messages_text = ""
    if not messages:
        messages_text = "–í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!"
    else:
        for msg in messages:
            position_text = f" (#{msg['queue_position']})" if msg['queue_position'] else ""
            messages_text += f"<b>{msg['anonymous_id']}</b>{position_text}:\n{msg['message_text']}\n\n"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_edit_message(
        callback.message,
        f"{chat_header}{messages_text}",
        reply_markup=get_chat_keyboard()
    )


async def send_message_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'."""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
        "–î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏ –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏.\n\n"
        "<i>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</i>\n"
        "- –ó–∞–ø—Ä–µ—â–µ–Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞\n"
        "- –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "- –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –∏ —Å–ø–∞–º\n"
        "- –ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.",
        reply_markup=get_back_to_chat_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(ChatState.waiting_for_message)


async def process_chat_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(message.text) > 500:
        await message.answer(
            "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 500 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    media_info = None
    if message.photo:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        media_info = {
            'type': 'photo',
            'id': photo.file_id
        }
    
    message_id = await save_chat_message(message.from_user.id, message.text, media_info)
    
    if message_id:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–∞—Ç–∞
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        car_number = await get_car_number(message.from_user.id)
        queue_position = None
        
        if car_number:
            parser = CoddParser()
            car_data = await parser.parse_car_data(car_number)
            if car_data:
                queue_position = car_data['queue_position']
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID
        anonymous_id = await generate_anonymous_id(message.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = {
            'anonymous_id': anonymous_id,
            'message_text': message.text,
            'queue_position': queue_position,
            'has_media': bool(media_info),
            'media_type': media_info.get('type') if media_info else None,
            'media_id': media_info.get('id') if media_info else None
        }
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        import asyncio
        asyncio.create_task(process_chat_notifications(message.bot, message_data, message.from_user.id))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        await cmd_chat(message, state)
    else:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def report_message_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ'."""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await state.update_data(messages_view=callback.message.text)
    
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è.\n"
        "–ù–æ–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Å–∫–æ–±–∫–∞—Ö —Ä—è–¥–æ–º —Å –Ω–∏–∫–Ω–µ–π–º–æ–º.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=get_back_to_chat_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(ChatState.report_reason)


async def process_report_reason(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        message_id = int(message.text.strip())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É
        result = await report_message(message_id, message.from_user.id, "–ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        if result:
            await message.answer(
                "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ –ø–æ—Ä—è–¥–∫–∞ –≤ —á–∞—Ç–µ."
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ."
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        data = await state.get_data()
        prev_text = data.get('messages_view', '')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        await cmd_chat(message, state)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)."
        )


async def exit_chat_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞'."""
    await callback.answer()
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —É—á–∞—Å—Ç–∏–µ –≤ —á–∞—Ç–µ
    await toggle_chat_participation(callback.from_user.id, False)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.message.edit_text(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —á–∞—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /chat."
    )


async def back_to_chat_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç'."""
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —á–∞—Ç
    current_state = await state.get_state()
    await state.set_state(ChatState.in_chat)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
    await refresh_chat_callback(callback, state)


def get_chat_router() -> Router:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞."""
    router = Router()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    router.message.register(cmd_chat, Command("chat"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    router.callback_query.register(refresh_chat_callback, F.data == "refresh_chat", ChatState.in_chat)
    router.callback_query.register(send_message_callback, F.data == "send_message", ChatState.in_chat)
    router.callback_query.register(report_message_callback, F.data == "report_message", ChatState.in_chat)
    router.callback_query.register(exit_chat_callback, F.data == "exit_chat", ChatState.in_chat)
    router.callback_query.register(back_to_chat_callback, F.data == "back_to_chat")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–≤–æ–¥–∞
    router.message.register(process_chat_message, ChatState.waiting_for_message)
    router.message.register(process_report_reason, ChatState.report_reason)
    
    return router 