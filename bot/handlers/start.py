from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.models.database import add_user, update_car_number, get_car_number
from bot.keyboards.keyboards import get_main_menu
from bot.services.parser import CoddParser


class CarNumberState(StatesGroup):
    waiting_for_car_number = State()


async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await add_user(message.from_user.id, message.from_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    current_car_number = await get_car_number(message.from_user.id)
    
    if current_car_number:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        parser = CoddParser()
        car_data = await parser.parse_car_data(current_car_number)
        
        if car_data:
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç <b>–¶–û–î–î –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å</b>!\n\n"
                f"–£ –≤–∞—Å —É–∂–µ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: <code>{current_car_number}</code>\n"
                f"–ú–æ–¥–µ–ª—å: {car_data['model']}\n"
                f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{car_data['queue_position']}</b>\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}",
                reply_markup=get_main_menu()
            )
        else:
            # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –µ—Å—Ç—å, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç <b>–¶–û–î–î –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å</b>!\n\n"
                f"–£ –≤–∞—Å —É–∂–µ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: <code>{current_car_number}</code>\n\n"
                f"‚ùì –û–¥–Ω–∞–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏.",
                reply_markup=get_main_menu()
            )
    else:
        # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç <b>–¶–û–î–î –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å</b>!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –¶–û–î–î.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø—Ä–∏—Ü–µ–ø–æ–º —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.\n"
            "–§–æ—Ä–º–∞—Ç: <code>[–≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è]-[–≥–æ—Å. –Ω–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞]</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>P131XM61-AP234015</code>"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
        await state.set_state(CarNumberState.waiting_for_car_number)


async def process_car_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    car_number = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞
    if "-" not in car_number or len(car_number) < 5:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>[–≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è]-[–≥–æ—Å. –Ω–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞]</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>P131XM61-AP234015</code>"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
    parser = CoddParser()
    car_data = await parser.parse_car_data(car_number)
    
    if car_data:
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ë–î
        await update_car_number(message.from_user.id, car_number)
        
        await message.answer(
            f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: <code>{car_data['car_number']}</code>\n"
            f"–ú–æ–¥–µ–ª—å: {car_data['model']}\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{car_data['queue_position']}</b>\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}",
            reply_markup=get_main_menu()
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä
        await state.clear()
    else:
        await message.answer(
            f"‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º <code>{car_number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞


def get_start_router() -> Router:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start."""
    router = Router()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã start –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    router.message.register(cmd_start, CommandStart())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    router.message.register(process_car_number, CarNumberState.waiting_for_car_number)
    
    return router 