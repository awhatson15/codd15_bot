from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from bot.models.database import update_car_number, get_car_number, delete_car_number
from bot.services.parser import CoddParser
from bot.keyboards.keyboards import get_main_menu
from bot.utils.message_utils import safe_edit_message


class ChangeCarState(StatesGroup):
    waiting_for_new_car_number = State()


async def cmd_check_queue(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_number = await get_car_number(message.from_user.id)
    
    if not car_number:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    parser = CoddParser()
    car_data = await parser.parse_car_data(car_number)
    
    if car_data:
        await message.answer(
            f"üöó <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –æ—á–µ—Ä–µ–¥–∏</b>\n\n"
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: <code>{car_data['car_number']}</code>\n"
            f"–ú–æ–¥–µ–ª—å: {car_data['model']}\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{car_data['queue_position']}</b>\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}",
            reply_markup=get_main_menu()
        )
    else:
        await message.answer(
            f"‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å –Ω–æ–º–µ—Ä–æ–º <code>{car_number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=get_main_menu()
        )


async def check_queue_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å'."""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_number = await get_car_number(callback.from_user.id)
    
    if not car_number:
        await safe_edit_message(
            callback.message,
            "‚ùå –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    parser = CoddParser()
    car_data = await parser.parse_car_data(car_number)
    
    if car_data:
        await safe_edit_message(
            callback.message,
            f"üöó <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ –æ—á–µ—Ä–µ–¥–∏</b>\n\n"
            f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–æ–º–µ—Ä: <code>{car_data['car_number']}</code>\n"
            f"–ú–æ–¥–µ–ª—å: {car_data['model']}\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{car_data['queue_position']}</b>\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}",
            reply_markup=get_main_menu()
        )
    else:
        await safe_edit_message(
            callback.message,
            f"‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å –Ω–æ–º–µ—Ä–æ–º <code>{car_number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
            reply_markup=get_main_menu()
        )


async def change_car_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ'."""
    await callback.answer()
    
    await callback.message.edit_text(
        "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø—Ä–∏—Ü–µ–ø–æ–º —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å.\n"
        "–§–æ—Ä–º–∞—Ç: <code>[–≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è]-[–≥–æ—Å. –Ω–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞]</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>P131XM61-AP234015</code>"
    )
    
    await state.set_state(ChangeCarState.waiting_for_new_car_number)


async def process_new_car_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è."""
    car_number = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if "-" not in car_number or len(car_number) < 5:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>[–≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è]-[–≥–æ—Å. –Ω–æ–º–µ—Ä –ø—Ä–∏—Ü–µ–ø–∞]</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>P131XM61-AP234015</code>"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
    parser = CoddParser()
    car_data = await parser.parse_car_data(car_number)
    
    if car_data:
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ë–î
        await update_car_number(message.from_user.id, car_number)
        
        await message.answer(
            f"‚úÖ –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
            f"–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: <code>{car_data['car_number']}</code>\n"
            f"–ú–æ–¥–µ–ª—å: {car_data['model']}\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{car_data['queue_position']}</b>\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {car_data['registration_date']}",
            reply_markup=get_main_menu()
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–æ–º–µ—Ä
        await state.clear()
    else:
        await message.answer(
            f"‚ö†Ô∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º <code>{car_number}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞


async def delete_car_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ'."""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    car_number = await get_car_number(callback.from_user.id)
    
    if not car_number:
        await safe_edit_message(
            callback.message,
            "‚ùå –£ –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
            reply_markup=get_main_menu()
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    success = await delete_car_number(callback.from_user.id)
    
    if success:
        await safe_edit_message(
            callback.message,
            f"‚úÖ –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è <code>{car_number}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
            f"–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ'.",
            reply_markup=get_main_menu()
        )
    else:
        await safe_edit_message(
            callback.message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
            reply_markup=get_main_menu()
        )


def get_car_router() -> Router:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º."""
    router = Router()
    
    router.message.register(cmd_check_queue, Command("check"))
    router.callback_query.register(check_queue_callback, F.data == "check_queue")
    router.callback_query.register(change_car_callback, F.data == "change_car")
    router.callback_query.register(delete_car_callback, F.data == "delete_car")
    router.message.register(process_new_car_number, ChangeCarState.waiting_for_new_car_number)
    
    return router 